#!/usr/bin/env ruby

require 'bundler/setup'
require 'optparse'
require 'yaml'
require 'superbear/version'

require 'pry'

options = {}

parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{__FILE__} [files]"
  opts.on("-v", "--[no-]verbose", "use dot or doc formatter, output contains dots or detailed steps and failed checks") do |v|
    options[:verbose] = v
  end

  opts.on_tail("--version", "show version") do
    puts SuperBear::VERSION
    exit(1)
  end

  opts.on_tail("-h", "--help", "show this message") do
    puts opts
    exit(1)
  end
end

begin
  parser.parse!
rescue OptionParser::MissingArgument
  puts parser.help
  exit(1)
end

=begin
checklist = YAML.load_file(options[:file_name])

RSpec.configure do |config|
  config.full_backtrace = false
  config.backtrace_inclusion_patterns = [
      /superbear/
  ]
end

checklist.each do |host_checks|
  RSpec.describe host_checks["host"] do
    if host_checks["ssh"]
      ssh_checks = host_checks["ssh"]
      if ssh_checks["fingerprint"]
        describe 'SSH' do
          it "checks the fingerprint of the host is \"#{ssh_checks['fingerprint']}\"" do
            keys = SamoKontrola::Ssh::Fingerprint.(host: host_checks["host"])
            expect(keys.size).to eq(1)
            expect(keys.first).to eq(ssh_checks["fingerprint"])
          end
        end
      end
    end

    if host_checks["http"]
      http_checks = host_checks["http"]

      describe 'HTTP' do
        uri = URI("http://#{host_checks['host']}")
        response = Net::HTTP.get_response(uri)

        if http_checks["content"]
          it "the root URL body contains \"#{http_checks['content']}\"" do
            expect(response.body).to include(http_checks["content"])
          end
        end

        if http_checks["status"]
          it "the root URL returns HTTP code \"#{http_checks['status'].to_i}\"" do
            expect(response.code.to_i).to eq(http_checks["status"].to_i)
          end
        end
      end
    end

    if host_checks["https"]
      https_checks = host_checks["https"]

      describe 'HTTPS' do
        begin
          uri = URI("https://#{host_checks['host']}")
          response = Net::HTTP.get_response(uri)
        rescue OpenSSL::SSL::SSLError => e
          response = OpenStruct.new(code: 0, body: 'system: SSL certificate is NOT VALID')
        end

        if http_checks["content"]
          it "the root URL body contains \"#{https_checks['content']}\"" do
            # net/http sets to ascii sometimes even for utf-8 response
            expect(response.body.force_encoding(Encoding::UTF_8)).to include(https_checks["content"])
          end
        end

        if http_checks["status"]
          it "the root URL returns HTTP code \"#{https_checks['status'].to_i}\"" do
            expect(response.code.to_i).to eq(https_checks["status"].to_i)
          end
        end
      end
    end

    if host_checks["dns"]
      dns_checks = host_checks["dns"]
      in_checks = dns_checks["IN"]

      describe 'DNS' do
        resolver = Dnsruby::Resolver.new

        if in_checks['A']
          it "checks A records: #{in_checks['A']}" do
            response = resolver.query(host_checks['host'], 'A').answer.map {|a| a.address.to_s }
            expect(response).to match_array(in_checks['A'])
          end
        end

        if in_checks['AAAA']
          it "checks AAAA records: #{in_checks['AAAA']}" do
            response = resolver.query(host_checks['host'], 'AAAA').answer.map {|aaaa| aaaa.address.to_s }.map(&:downcase)
            expect(response).to match_array(in_checks['AAAA'])
          end
        end

        if in_checks['MX']
          it "checks MX records: #{in_checks['MX']}" do
            response = resolver.query("myrtana.sk", 'MX').answer.map {|item| {"preference" => item.preference, "exchange" => item.exchange.to_s} }
            expect(response).to match_array(in_checks['MX'])
          end
        end

        if in_checks['NS']
          it "checks NS records: #{in_checks['NS']}" do
            response = resolver.query(host_checks['host'], 'NS').answer.map {|ns| ns.nsdname.to_s }
            expect(response).to match_array(in_checks['NS'])
          end
        end

        if in_checks['PTR']
          it "checks PTR records: #{in_checks['PTR']}" do
            response = resolver.query(host_checks['host'], 'PTR').answer.map {|ptr| ptr.domainname.to_s }
            expect(response).to match_array(in_checks['PTR'])
          end
        end

        if in_checks['SOA']
          it "checks SOA records: #{in_checks['SOA']}" do
            response = resolver.query(host_checks['host'], 'SOA').answer.map do |soa|
              {
                "mname" => soa.mname.to_s,
                "rname" => soa.rname.to_s,
                "serial" => soa.serial,
                "refresh" => soa.refresh,
                "retry" => soa.retry,
                "expire" => soa.expire,
                "minimum_ttl" => soa.minimum
              }
            end.first
            expect(response).to match_array(in_checks['SOA'])
          end
        end

        if in_checks['TXT']
          it "checks TXT records: #{in_checks['TXT']}" do
            response = resolver.query(host_checks['host'], 'TXT').answer.map{ |txt| txt.data }
            expect(response).to match_array(in_checks['TXT'])
          end
        end

      end
    end

  end
end

RSpec::Core::Runner.run(['.'], $stderr, $stdout)
=end

